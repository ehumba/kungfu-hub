// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: subscriptions.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addSubscription = `-- name: AddSubscription :one
INSERT INTO subscriptions(user_id, martial_art_id)
VALUES ($1, $2)
RETURNING id, user_id, martial_art_id
`

type AddSubscriptionParams struct {
	UserID       uuid.UUID
	MartialArtID uuid.UUID
}

func (q *Queries) AddSubscription(ctx context.Context, arg AddSubscriptionParams) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, addSubscription, arg.UserID, arg.MartialArtID)
	var i Subscription
	err := row.Scan(&i.ID, &i.UserID, &i.MartialArtID)
	return i, err
}

const getUserSubscriptions = `-- name: GetUserSubscriptions :many
SELECT ma.id, ma.name FROM martial_arts ma
JOIN subscriptions s ON ma.id = s.martial_art_id
WHERE s.user_id = $1
`

func (q *Queries) GetUserSubscriptions(ctx context.Context, userID uuid.UUID) ([]MartialArt, error) {
	rows, err := q.db.QueryContext(ctx, getUserSubscriptions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MartialArt
	for rows.Next() {
		var i MartialArt
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeSubscription = `-- name: RemoveSubscription :exec
DELETE FROM subscriptions
WHERE user_id = $1 AND martial_art_id = $2
`

type RemoveSubscriptionParams struct {
	UserID       uuid.UUID
	MartialArtID uuid.UUID
}

func (q *Queries) RemoveSubscription(ctx context.Context, arg RemoveSubscriptionParams) error {
	_, err := q.db.ExecContext(ctx, removeSubscription, arg.UserID, arg.MartialArtID)
	return err
}
